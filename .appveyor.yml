version: "{build}"

# Do a shallow clone of the repo to speed up build
clone_depth: 1

# Install needed build dependencies
before_build:
  # Download and install latest version of CYGWIN
  - ps: 'Start-FileDownload "http://cygwin.com/setup-x86.exe" -FileName "setup-x86.exe"'
  - 'setup-x86.exe --quiet-mode --no-shortcuts --only-site --root "%CYG_ROOT%" --site "%CYG_MIRROR%" --local-package-dir "%CYG_CACHE%" --packages autoconf,automake,bison,gcc-core,gcc-g++,mingw64-i686-runtime,mingw64-i686-binutils,mingw64-i686-gcc-core,mingw64-i686-gcc-g++,mingw64-i686-pthreads,mingw64-i686-w32api,libtool,make,python,gettext-devel,gettext,intltool,libiconv,pkg-config,git,curl,libxslt > NUL 2>&1'
  - '%CYG_BASH% -lc "cygcheck -dc cygwin"'
  # Download and install the required version of Mono
  - ps: Start-FileDownload "http://download.mono-project.com/archive/4.4.0/windows-installer/mono-4.4.0.142-gtksharp-2.12.38-win32-0.msi" -FileName "mono.msi"
  - ps: Start-FileDownload "https://github.com/activescott/lessmsi/releases/download/v1.5.1/lessmsi-v1.5.1.zip" -FileName "lessmsi.zip"
  - 7z e lessmsi.zip > NUL
  - lessmsi x mono.msi
  # Set environmental variables and add to PATH
  - SET MONO_WIN=%APPVEYOR_BUILD_FOLDER%\mono\SourceDir\Mono
  - SET MONO_LIB=%MONO_WIN%\lib\mono\4.5
  - for /f "delims=" %%a in ('%%CYG_PATH%% %%MONO_WIN%%') do @set MONO=%%a
  - SET PKG_CONFIG_PATH=%MONO%/lib/pkgconfig
  - SET MACHINECONFIG=%MONO_WIN%\etc\mono\4.5\machine.config
  - SET PATH=%PATH%;%MONO%\bin
  - SET SOURCE_FILES=%APPVEYOR_BUILD_FOLDER%\Resources\basic.exe %MONO_LIB%\mscorlib.dll %MONO_LIB%\System.dll %MONO_LIB%\System.Core.dll %MONO_LIB%\System.Xml.dll

build_script:
  # Create temp files from source file and dependencies
  - '%CYG_BASH% -lc "cd $APPVEYOR_BUILD_FOLDER; exec 0</dev/null; mkbundle $SOURCE_FILES -c -o temp.c -oo temp.o --machine-config \"$MACHINECONFIG\""'
  - ps: (Get-Content temp.c -Raw) | Foreach-Object {$_ -replace "int main(.|\n)*", (Get-Content Resources\win.c -Raw)} | Set-Content temp.c
  # Update version with build number
  - ps: (Get-Content Resources\resource.rc -Raw) | Foreach-Object {$_ -replace "(?<version>\d[,|\.]\d[,|\.]\d[,|\.])\d", "`${version}$env:APPVEYOR_BUILD_NUMBER" } | Set-Content Resources\resource.rc
  - '%CYG_BASH% -lc "cd $APPVEYOR_BUILD_FOLDER; exec 0</dev/null; windres -i Resources/resource.rc -o resource.o"'
  # Create final file from temp files
  - '%CYG_BASH% -lc "cd $APPVEYOR_BUILD_FOLDER; exec 0</dev/null; export MONO_PATH=$MONO; export PKG_CONFIG_PATH=$PKG_CONFIG_PATH; i686-w64-mingw32-gcc -m32 -g -o CSharpCompiler.exe -Wall temp.c `pkg-config --cflags --libs mono-2 | sed \"s/-mwindows//g\"` temp.o resource.o"'

on_success:
  # Download and unpack UPX for compression
  - ps: Start-FileDownload "https://github.com/upx/upx/releases/download/v3.93/upx393w.zip" -FileName "upxw.zip"
  - 7z e upxw.zip -aoa > NUL
  # Compress using UPX and compression level 9
  - upx.exe -q -9 CSharpCompiler.exe %MONO_WIN%/bin/mono-2.0.dll

notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: false
  - provider: Slack
    incoming_webhook:
      secure: u7b+ql8ck7XEi13iK+e6Nr2RqQ8nIh44Mi3sco3ujAVjzOvOP1E2AMKHDqpG2A/RaRpDFLDg7MhEB+rAZ1haFQYn/tEAVV+nLqqakNmqri0=
    channel: updates

environment:
  global:
    CYG_ROOT: C:\cygwin
    CYG_MIRROR: http://cygwin.mirror.constant.com
    CYG_CACHE: C:\cygwin\var\cache\setup
    CYG_BASH: C:\cygwin\bin\bash
    CYG_PATH: C:\cygwin\bin\cygpath

cache:
  - '%CYG_CACHE%'

test: off
deploy: off
